// https://leetcode.com/problems/partition-list/


//Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
//You should preserve the original relative order of the nodes in each of the two partitions.

//Input: head = [1,4,3,2,5,2], x = 3
// Output: [1,2,2,4,3,5]

//solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode *smaller_ptr=new ListNode(0), *greater_ptr=new ListNode(0),*ptr=head;
        ListNode *smaller=smaller_ptr,*greater=greater_ptr;
        while(ptr)
        {
            if(ptr->val <x)
            {
                smaller_ptr->next=ptr;
                smaller_ptr=smaller_ptr->next;
            }
            else
            {
                greater_ptr->next=ptr;
                greater_ptr=greater_ptr->next;
            }
            ptr=ptr->next;
        }
        greater_ptr->next=nullptr;
        smaller_ptr->next=greater->next;
        return smaller->next;
    }
};
